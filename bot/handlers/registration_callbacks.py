from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state
from aiogram.filters import Command, StateFilter
from aiogram.types import CallbackQuery, Message
from aiogram import Router, F

from bot.keyboards.registration_keyboards import *
from bot.keyboards.main_keyboards import main_user_kb
from bot.keyboards.admin_panel_keyboards import admin_panels_kb

from bot.middlewares.throttling import ThrottlingMiddleware

from bot.db.requests import set_user, get_user
from dotenv import dotenv_values
from bot.misc.states import RegistrationSteps

router = Router()
router.message.middleware(ThrottlingMiddleware())


@router.message(Command('start'))
async def start(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω –∏–ª–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫,
    –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–º—É –∫–æ–Ω—Å–æ–ª—å –∞–¥–º–∏–Ω–∞ –∏–ª–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞, –∏–Ω–∞—á–µ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω - —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º.
    –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –µ–≥–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ü–∏—Ñ—Ä—ã –∫–ª–∞—Å—Å–∞.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        None: –§—É–Ω–∫—Ü–∏—è –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç.
    """
    env_vars = dotenv_values(".env")

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω –∏–ª–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Å–æ–ª—å
    if message.from_user.id in set(map(int, env_vars['ADMIN_IDS'].split(',') + env_vars['DEVELOPERS_IDS'].split(','))):
        await message.answer(text=f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}! –í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–∞–Ω–Ω–æ–≥–æ '
                                  f'–±–æ—Ç–∞ –∏ –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –¥–ª—è —ç—Ç–æ–≥–æ '
                                  f'–≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å—é',
                             reply_markup=admin_panels_kb(message.from_user.id))

    # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –æ–Ω –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    elif not await get_user(message.from_user.id):
        await state.set_state(RegistrationSteps.class_num_choose)
        await message.answer('–ü—Ä–∏–≤–µ—Ç, –¥–∞–≤–∞–π –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è —Å —Ç–≤–æ–∏–º–∏ –∫–ª–∞—Å—Å–æ–º –∏ –≥—Ä—É–ø–ø–æ–π', reply_markup=start_menu_kb())


@router.callback_query(F.data == 'start_registration', StateFilter(RegistrationSteps.class_num_choose))
async def class_num_choose(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –±—É–∫–≤—ã –∫–ª–∞—Å—Å–∞.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        callback (CallbackQuery): –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–µ.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        None: –§—É–Ω–∫—Ü–∏—è –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç.
    """
    await state.set_state(RegistrationSteps.class_letter_choose)
    await callback.message.edit_text(text='–ö–∞–∫–æ–π —É —Ç–µ–±—è –∫–ª–∞—Å—Å?', reply_markup=class_num_choose_kb())


@router.callback_query(F.message.text == '–ö–∞–∫–æ–π —É —Ç–µ–±—è –∫–ª–∞—Å—Å?', StateFilter(RegistrationSteps.class_letter_choose))
async def class_letter_choose(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –±—É–∫–≤—ã –∫–ª–∞—Å—Å–∞. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        callback (CallbackQuery): –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–µ.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        None: –§—É–Ω–∫—Ü–∏—è –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç.
    """
    class_num = callback.data
    await state.update_data(num=class_num)
    await state.set_state(RegistrationSteps.class_group_choose)
    await callback.message.edit_text(text='–ê —á—Ç–æ –Ω–∞—Å—á—ë—Ç –±—É–∫–≤—ã?', reply_markup=class_letter_choose_kb(class_num))


@router.callback_query(F.message.text == '–ê —á—Ç–æ –Ω–∞—Å—á—ë—Ç –±—É–∫–≤—ã?', StateFilter(RegistrationSteps.class_group_choose))
async def class_group_choose(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã –∫–ª–∞—Å—Å–∞. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –±—É–∫–≤—É –∫–ª–∞—Å—Å–∞ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã —É–Ω–∏–≤–µ—Ä–¥–Ω—è.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        callback (CallbackQuery): –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–µ.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        None: –§—É–Ω–∫—Ü–∏—è –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç.
    """
    class_letter = callback.data
    await state.update_data(letter=class_letter)
    await state.set_state(RegistrationSteps.uday_group_choose)
    await callback.message.edit_text(text='–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–≤–æ—é –≥—Ä—É–ø–ø—É –∫–ª–∞—Å—Å–∞', reply_markup=class_group_choose_kb())


@router.callback_query(F.message.text == '–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–≤–æ—é –≥—Ä—É–ø–ø—É –∫–ª–∞—Å—Å–∞',
                       StateFilter(RegistrationSteps.uday_group_choose))
async def uday_group_choose(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã –∫–ª–∞—Å—Å–∞. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        callback (CallbackQuery): –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–µ.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        None: –§—É–Ω–∫—Ü–∏—è –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç.
    """
    user_data = await state.get_data()
    class_num = user_data.get('num')
    class_group = callback.data
    await state.update_data(cl_gr=class_group)
    await state.set_state(RegistrationSteps.confirmation)
    await callback.message.edit_text(text='–û—Ç–ª–∏—á–Ω–æ, –æ—Å—Ç–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É —É–Ω–∏–≤–µ—Ä–¥–Ω—è',
                                     reply_markup=uday_group_choose_kb(class_num))


@router.callback_query(F.message.text == '–û—Ç–ª–∏—á–Ω–æ, –æ—Å—Ç–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É —É–Ω–∏–≤–µ—Ä–¥–Ω—è',
                       StateFilter(RegistrationSteps.confirmation))
async def data_confirmation(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        callback (CallbackQuery): –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–µ.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        None: –§—É–Ω–∫—Ü–∏—è –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç.
    """
    user_data = await state.get_data()
    class_num = user_data.get('num')
    class_letter = user_data.get('letter')
    class_group = '–≥—Ä—É–ø–ø–∞ –ê' if user_data.get('cl_gr') == '0' else '–ì—Ä—É–ø–ø–∞ –ë'
    uday_group = callback.data
    await state.update_data(ud_gr=uday_group)
    await state.set_state(RegistrationSteps.final)
    await callback.message.edit_text(text=f'üîé –ü—Ä–æ–≤–µ—Ä—å, –≤—Å—ë –ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –≤–µ—Ä–Ω–æ:\nüìô {class_num} {class_letter} –∫–ª–∞—Å—Å,'
                                     f' {class_group}\nüìó {uday_group} –≥—Ä—É–ø–ø–∞ —É–Ω–∏–≤–µ—Ä–¥–Ω—è',
                                     reply_markup=data_confirmation_kb())


@router.callback_query(F.message.text.startswith('üîé –ü—Ä–æ–≤–µ—Ä—å, –≤—Å—ë –ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –≤–µ—Ä–Ω–æ:'),
                       StateFilter(RegistrationSteps.final))
async def final_or_restart_registration(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        callback (CallbackQuery): –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–µ.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        None: –§—É–Ω–∫—Ü–∏—è –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç.
    """
    if callback.data == 'restart':
        await state.set_state(RegistrationSteps.class_letter_choose)
        await callback.message.edit_text(text='–ö–∞–∫–æ–π —É —Ç–µ–±—è –∫–ª–∞—Å—Å?', reply_markup=class_num_choose_kb())
    else:
        user_data = await state.get_data()
        user_id = callback.from_user.id
        class_letter = f'{user_data.get("num")} {user_data.get("letter")}'
        class_group, uday_group = int(user_data.get('cl_gr')), int(user_data.get('ud_gr'))
        await set_user(user_id, class_letter, class_group, uday_group)
        await state.clear()
        await callback.message.delete()
        await callback.message.answer(text='–£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!', reply_markup=main_user_kb())
