from aiogram.utils.media_group import MediaGroupBuilder
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramForbiddenError
from aiogram.filters import StateFilter
from aiogram.types import CallbackQuery, Message, ContentType
from aiogram import Bot, Router, F

from bot.keyboards.admin_panel_keyboards import *

from bot.middlewares.album_middlleware import AlbumMiddleware
from bot.middlewares.admin_filter import AdminAccessMiddleware

from bot.misc.parsing import Parser
from bot.misc.states import AdminPanelPages

from bot.db.requests import get_users_ids, get_all_users_ids, delete_user


import datetime as dt
import asyncio

router = Router()
router.message.middleware(AdminAccessMiddleware())
router.callback_query.middleware(AdminAccessMiddleware())
router.message.middleware(AlbumMiddleware())


@router.message(F.text == '–∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å üîê')
async def admin_panel(message: Message, state: FSMContext) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        None: –§—É–Ω–∫—Ü–∏—è –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç.
    """
    await message.answer(text='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!', reply_markup=admin_panel_kb())
    await state.clear()


@router.callback_query(F.data == 'back')
async def admin_panel_back(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ —Å –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        callback (CallbackQuery): –û–±—ä–µ–∫—Ç –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–µ.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        None: –§—É–Ω–∫—Ü–∏—è –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç.
    """
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–ø—Ä–æ—Å–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    notification_data = await state.get_data()
    messages_to_delete = notification_data.get('to_delete')
    if isinstance(messages_to_delete, Message):
        await messages_to_delete.delete()
    elif messages_to_delete:
        for message in messages_to_delete:
            await message.delete()
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å, —É–¥–∞–ª–∏–≤ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    if callback.message.content_type == ContentType.TEXT:
        await callback.message.edit_text(text='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!', reply_markup=admin_panel_kb())
    else:
        await callback.message.delete()
        await callback.message.answer(text='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!', reply_markup=admin_panel_kb())
    await state.clear()


@router.callback_query(F.data == 'add_schedule')
async def file_request(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç .xlsx —Ñ–∞–π–ª —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        callback (CallbackQuery): –û–±—ä–µ–∫—Ç –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–µ.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        None: –§—É–Ω–∫—Ü–∏—è –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç.
    """
    await state.set_state(AdminPanelPages.schedule_file_parsing)
    await callback.message.edit_text(text='–æ—Ç–ø—Ä–∞–≤—å—Ç–µ .xlsx —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è',
                                     reply_markup=back_to_admin_kb())


@router.callback_query(F.data == 'start_notification')
async def notification_recievers_choose(callback: CallbackQuery) -> None:
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∞–¥—Ä–µ—Å–∞—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        callback (CallbackQuery): –û–±—ä–µ–∫—Ç –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–µ.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        None: –§—É–Ω–∫—Ü–∏—è –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç.
    """
    await callback.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å–∞—Ç–æ–≤ —Ä–∞—Å—Å—ã–ª–∫–∏', reply_markup=recievers_choose_kb())


@router.callback_query(F.message.text == '–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å–∞—Ç–æ–≤ —Ä–∞—Å—Å—ã–ª–∫–∏', F.data != 'back')
async def notification_message_request(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∞–¥—Ä–µ—Å–∞—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        callback (CallbackQuery): –û–±—ä–µ–∫—Ç –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–µ.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        None: –§—É–Ω–∫—Ü–∏—è –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç.
    """
    recievers = callback.data
    await state.update_data(recievers=recievers)
    await state.set_state(AdminPanelPages.notification_confirmation)
    await callback.message.edit_text(text='–æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏')


@router.message(StateFilter(AdminPanelPages.notification_confirmation))
async def notification_message_confirm(message: Message, state: FSMContext, album: list = None) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –∞–¥–º–∏–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.
        album (list, optional): –°–ø–∏—Å–æ–∫ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∞–ª—å–±–æ–º–µ. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é None.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        None: –§—É–Ω–∫—Ü–∏—è –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç.
    """
    notification_data = await state.get_data()
    recievers = notification_data.get('recievers')
    default_caption = f'–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è\n–ø–æ–ª—É—á–∞—Ç–µ–ª–∏: {recievers}'

    if album:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∞–ª—å–±–æ–º –ø—Ä–∏ –µ–≥–æ –Ω–∞–ª–∏—á–∏–∏, –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å—å —Ç–æ –¥–æ–±–∞–≤—è–ª–µ–º –µ—ë
        notification_text = album[0].caption if album[0].caption else ''
        album_builder = MediaGroupBuilder(caption=notification_text)

        for ms in album:
            if ms.photo:
                album_builder.add_photo(media=ms.photo[0].file_id)
            elif ms.video:
                album_builder.add_video(media=ms.video.file_id)

        # –°–æ–±–∏—Ä–∞–µ–º –∞–ª—å–±–æ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞–∏—é –æ–± –∞–ª—å–±–æ–º–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        album = album_builder.build()
        msg = await message.answer_media_group(media=album, caption=notification_text)
        await state.update_data(to_delete=msg, content_type='album', file_id=album)
        await message.answer(text=default_caption, reply_markup=notification_confirmation_kb())

    else:
        # –ï—Å–ª–∏ –∞–ª—å–±–æ–º–∞ –Ω–µ—Ç, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–¥–∏–Ω–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        notification_text = message.caption or message.text or ''
        message_caption = f'{notification_text}\n{"_" * 38}\n{default_caption}'

        # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Å—Ç–æ—Å—Ç–æ—è–Ω–∏–∏
        match message.content_type:
            case ContentType.TEXT:
                await message.answer(text=message_caption,
                                     reply_markup=notification_confirmation_kb())
                await state.update_data(content_type='text')

            case ContentType.PHOTO:
                await message.answer_photo(photo=message.photo[0].file_id,
                                           caption=message_caption,
                                           reply_markup=notification_confirmation_kb())
                await state.update_data(content_type='photo', file_id=message.photo[0].file_id)

            case ContentType.VIDEO:
                await message.answer_video(video=message.video.file_id,
                                           caption=message_caption,
                                           reply_markup=notification_confirmation_kb())
                await state.update_data(content_type='video', file_id=message.video.file_id)

            case ContentType.DOCUMENT:
                await message.answer_document(document=message.document.file_id,
                                              caption=message_caption,
                                              reply_markup=notification_confirmation_kb())
                await state.update_data(content_type='document', file_id=message.document.file_id)

            case ContentType.VIDEO_NOTE:
                msg = await message.answer_video_note(video_note=message.video_note.file_id)
                await state.update_data(to_delete=msg, content_type='video_note', file_id=message.video_note.file_id)
                await message.answer(text=message_caption, reply_markup=notification_confirmation_kb())

            case ContentType.VOICE:
                await message.answer_voice(voice=message.voice.file_id, caption=message_caption,
                                           reply_markup=notification_confirmation_kb())
                await state.update_data(content_type='voice', file_id=message.voice.file_id)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(text=notification_text if notification_text else '')
    await state.set_state(AdminPanelPages.notificaton_start)


@router.callback_query(F.data == 'send', StateFilter(AdminPanelPages.notificaton_start))
async def notifaction_start(callback: CallbackQuery, state: FSMContext, bot: Bot) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.

    –£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–∫–∏, –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏,
    —Ä–∞—Å—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏ –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –∞–¥–º–∏–Ω–∞ –æ —Å—Ç–∞—Ç—É—Å–µ —Ä–∞—Å—Å—ã–ª–∫–∏.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        callback (CallbackQuery): –û–±—ä–µ–∫—Ç –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –∑–∞–ø—Ä–æ—Å–µ.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
        bot (Bot): –û–±—ä–µ–∫—Ç –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        None: –§—É–Ω–∫—Ü–∏—è –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç.
    """
    notification_data = await state.get_data()

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ(—è) –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
    messages_to_delete = notification_data.get('to_delete')
    await callback.message.delete()

    if isinstance(messages_to_delete, Message):
        await messages_to_delete.delete()
    elif messages_to_delete:
        for message in messages_to_delete:
            await message.delete()

    recievers = notification_data.get('recievers')
    notification_text = notification_data.get('text')
    content_type, file_id = notification_data.get('content_type'), notification_data.get('file_id')

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞ –∏ –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ –Ω–∞—á–∞–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    cl_num = recievers.split()[0]
    students = await get_users_ids(cl_num) if recievers != '–≤—Å–µ –∫–ª–∞—Å—Å—ã' else await get_all_users_ids()
    msg = await callback.message.answer(text='—Ä–∞—Å—Å—ã–ª–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ\n' + '‚¨úÔ∏è' * 10)
    rows_num = len(students)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    for counter, student_id in enumerate(students, start=1):
        try:
            match content_type:
                case 'text':
                    await bot.send_message(chat_id=student_id, text=notification_text)
                case 'photo':
                    await bot.send_photo(chat_id=student_id, photo=file_id, caption=notification_text)
                case 'video':
                    await bot.send_video(chat_id=student_id, video=file_id, caption=notification_text)
                case 'document':
                    await bot.send_document(chat_id=student_id, document=file_id, caption=notification_text)
                case 'video_note':
                    await bot.send_video_note(chat_id=student_id, video_note=file_id)
                case 'voice':
                    await bot.send_voice(chat_id=student_id, voice=file_id, caption=notification_text)
                case 'album':
                    await bot.send_media_group(chat_id=student_id, media=file_id)

        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ —Ç–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
        except TelegramForbiddenError:
            await delete_user(student_id)

        percent = int(counter / rows_num * 100) // 10
        await msg.edit_text(text=f'—Ä–∞—Å—Å—ã–ª–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ\n{"üü©" * percent}{"‚¨úÔ∏è" * (10 - percent)} {counter}/{rows_num}')

        # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–µ–Ω–∏—è –Ω–∞—Ä—É—à–µ–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Ç–µ–ª–µ–≥—Ä–∞–º–∞
        await asyncio.sleep(0.035)

    await msg.edit_text(text='–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞‚úÖ')


@router.message(StateFilter(AdminPanelPages.schedule_file_parsing))
async def schedule_file_parsing(message: Message, state: FSMContext, bot: Bot) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ .xlsx –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –µ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥.

    –ï—Å–ª–∏ —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω, —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ –Ω–æ–≤–æ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏,
    –∞ —Ç–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
        bot (Bot): –û–±—ä–µ–∫—Ç –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        None: –§—É–Ω–∫—Ü–∏—è –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç.
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ–∫—É–º–µ–Ω—Ç –∏ —Ñ–∞–π–ª –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    if message.document and message.document.file_name.endswith('.xlsx'):
        file_name = message.document.file_name
        await bot.download(message.document.file_id, destination=f'./bot/uploads/{file_name}')
        parser = Parser(file_name)
        parsing_result = parser.parse()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞–¥–º–∏–Ω—É
        await message.answer(text=parsing_result)

        # –ï—Å–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ, –∑–∞–ø—É—Å–∫–∞–µ–º –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ
        if parsing_result == '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!':
            students = await get_all_users_ids()

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–Ω—å, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –∑–∞–≥—Ä—É–∂–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            if parser.date == dt.datetime.today().date():
                day = '—Å–µ–≥–æ–¥–Ω—è'
            elif parser.date == dt.datetime.today().date() + dt.timedelta(days=1):
                day = '–∑–∞–≤—Ç—Ä–∞'
            else:
                day = parser.date.strftime('%d.%m')

            # –£–≤–µ–¥–æ–º–ª—è–µ–º —É—á–µ–Ω–∏–∫–æ–≤ –æ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
            for student_id in students:
                await bot.send_message(chat_id=student_id, text=f'–∑–∞–≥—Ä—É–∂–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day}üóì')

                # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–µ–Ω–∏—è –Ω–∞—Ä—É—à–µ–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Ç–µ–ª–µ–≥—Ä–∞–º–∞
                await asyncio.sleep(0.035)
    else:
        await message.answer(text='–§–∞–π–ª —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞ .xlsx, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞',
                             reply_markup=back_to_admin_kb())

    await state.clear()
