from aiogram.exceptions import TelegramForbiddenError, TelegramBadRequest

from bot.db.requests import get_admins, check_schedule_existence
from bot.misc.parsing import parse_schedule_from_eljur
from bot.create_bot import bot, dp

from cachetools import TTLCache

from dotenv import dotenv_values


import datetime as dt


import asyncio
import logging
from apscheduler.schedulers.asyncio import AsyncIOScheduler 

errors_cache = TTLCache(maxsize=30, ttl=120)


async def start_bot() -> None:
    """
    –£–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–æ–≤ –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞, –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞.

    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç:
        None: —Ñ—É–Ω–∫—Ü–∏—è –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        None: —Ñ—É–Ω–∫—Ü–∏—è –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç.
    """
    env_vars = dotenv_values(".env")
    devs_ids = list(map(int, env_vars['DEVELOPERS_IDS'].split(',')))
    admins_ids = await get_admins()
    admins_and_devs = set(admins_ids + devs_ids)
    for id in admins_and_devs:
        try:
            await bot.send_message(chat_id=id, text='–±–æ—Ç –∑–∞–ø—É—â–µ–Ω üöÄ')
        except (TelegramForbiddenError, TelegramBadRequest):
            pass

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await main()


async def parse_schedule():
    today = dt.date.today()
    tomorrow = today + dt.timedelta(days=1)
    schedule_existence = await check_schedule_existence(today, tomorrow)
    if not schedule_existence[1]:
        message = '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –∑–≤–≥—Ä—É–∂–µ–Ω–æ!' if await parse_schedule_from_eljur(today, tomorrow, bot) else '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Å–ø–∞—Ä—Å–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ!'
        for id in await get_admins():
            await bot.send_message(chat_id=id, text=message)
        

async def main() -> None:
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞, –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –∏ –ª–æ–≥–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É.

    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç:
        None: —Ñ—É–Ω–∫—Ü–∏—è –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        None: —Ñ—É–Ω–∫—Ü–∏—è –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç.
    """
    scheduler = AsyncIOScheduler(timezone='Asia/Krasnoyarsk')
    scheduler.add_job(parse_schedule, 'cron', hour='11-21/1')
    scheduler.start()
    logs_format = '%(asctime)s - %(filename)s:%(lineno)d - %(message)s'
    logging.basicConfig(level=logging.ERROR, filename='logs.log', filemode='w', format=logs_format)

    while True:
        try:
            await bot.delete_webhook(drop_pending_updates=True)
            await dp.start_polling(bot)
        except Exception as ex:
            await dp.stop_polling()
            error_name = ex.__class__.__name__
            if not errors_cache.get(error_name):
                errors_cache[error_name] = True
                logging.error(ex)


if __name__ == '__main__':
    asyncio.run(start_bot())
